`timescale 1ns / 1ps
module CLA_Adder(
    input logic [3:0] X,
    input logic [3:0] Y,
    output logic [4:0] S 
    );
        
logic [4:1]C;
logic [3:0] P;
logic [3:0] G;
supply0 C_in;

assign P[0]=X[0]^Y[0];
assign P[1]=X[1]^Y[1];
assign P[2]=X[2]^Y[2];
assign P[3]=X[3]^Y[3];

assign G[0]=X[0]&Y[0];
assign G[1]=X[1]&Y[1];
assign G[2]=X[2]&Y[2];
assign G[3]=X[3]&Y[3];

assign C[1]=G[0] | (P[0]&C_in);
assign C[2]=G[1] | (P[1]&G[0]) | (P[0]&P[1]&C_in);
assign C[3]=G[2] | (P[2]&G[1]) | (P[2]&P[1]&G[0]) | (P[2]&P[1]&P[0]&C_in);
assign C[4]=G[3] | (P[3]&G[2]) | (P[3]&P[2]&G[1]) | (P[3]&P[2]&P[1]&G[0]) | (P[3]&P[2]&P[1]&P[0]&C_in);

assign S[0]=P[0]^C_in;
assign S[1]=P[1]^C[1];
assign S[2]=P[2]^C[2];
assign S[3]=P[3]^C[3];
assign S[4]=C[4]; 

endmodule
