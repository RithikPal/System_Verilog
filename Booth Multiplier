`timescale 1ns / 1ps
module CLA_Adder(
    input logic [3:0] X,
    input logic [3:0] Y,
    output logic [4:0] S 
    );
        
logic [4:1]C;
logic [3:0] P;
logic [3:0] G;
supply0 C_in;

assign P[0]=X[0]^Y[0];
assign P[1]=X[1]^Y[1];
assign P[2]=X[2]^Y[2];
assign P[3]=X[3]^Y[3];

assign G[0]=X[0]&Y[0];
assign G[1]=X[1]&Y[1];
assign G[2]=X[2]&Y[2];
assign G[3]=X[3]&Y[3];

assign C[1]=G[0] | (P[0]&C_in);
assign C[2]=G[1] | (P[1]&G[0]) | (P[0]&P[1]&C_in);
assign C[3]=G[2] | (P[2]&G[1]) | (P[2]&P[1]&G[0]) | (P[2]&P[1]&P[0]&C_in);
assign C[4]=G[3] | (P[3]&G[2]) | (P[3]&P[2]&G[1]) | (P[3]&P[2]&P[1]&G[0]) | (P[3]&P[2]&P[1]&P[0]&C_in);

assign S[0]=P[0]^C_in;
assign S[1]=P[1]^C[1];
assign S[2]=P[2]^C[2];
assign S[3]=P[3]^C[3];
assign S[4]=C[4]; 

endmodule

module Complement_2s(
input logic [3:0] in,
output logic [3:0] out

    );
assign out=(~in) + 1;

endmodule

module Booth_Algo(
   input logic [3:0]A,
   input logic [4:1] Multiplier_Q,
   input logic Q0,
   input logic [3:0] Multiplicand_M,
    output logic [3:0] Res1, // correspond to shifting of A
    output logic [3:0] Res2,  // correspond to shifting of Q
    output logic Q_0
    );
logic [3:0]A0;
logic [3:0]B0;
logic [3:0]Complement_of_M;
Complement_2s C1(Multiplicand_M, Complement_of_M);
CLA_Adder add(A,Multiplicand_M,A0);
CLA_Adder sub(A,Complement_of_M,B0);

always @(*) begin
if(Multiplier_Q[1]==Q0) begin
Q_0=Multiplier_Q[1];
Res2 = Multiplier_Q>>1;
Res2[3]=A[0];
Res1= A>>1;
Res1[3]=A[3];
end

else if(Multiplier_Q[1]==0 && Q0==1)begin
Q_0=Multiplier_Q[1];
Res2=Multiplier_Q>>1;
Res2[3]=A0[0];

Res1=A0>>1;
Res1[3]=A0[3];
end

else begin
Q_0=Multiplier_Q[1];
Res2=Multiplier_Q>>1;
Res2[3]=B0[0];

Res1=B0>>1;
Res1[3]=B0[3];


end
end
endmodule


module Booth_Multiplier(
   input logic [3:0] Multiplicand_M,
    input logic [4:1] Multiplier_Q,
    output logic [7:0] Res
    );
logic [3:0] Q [0:2];
logic [3:0] A [0:3];
logic [3:0]Q0;
logic Q_0;

Booth_Algo B1(A[0], Multiplier_Q, 0, Multiplicand_M, A[1], Q[0], Q0[1]);
Booth_Algo B2(A[1], Q[0], Q0[1], Multiplicand_M, A[2], Q[1], Q0[2]);
Booth_Algo B3(A[2], Q[1], Q0[2], Multiplicand_M, A[3], Q[2], Q0[3]);
Booth_Algo B4(A[3], Q[2], Q0[3], Multiplicand_M, Res[7:4], Res[3:0], Q_0);


endmodule

